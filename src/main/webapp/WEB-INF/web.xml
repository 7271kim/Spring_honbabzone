<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <!-- 프로젝트 이름 및 설명 -->
    <display-name>honbabzone</display-name> 
    <description>for my dream</description>
    
    <!-- index 페이지 -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    <!-- 공유빈 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/config/config.xml
            /WEB-INF/config/mailsender.xml
            /WEB-INF/common-bean.xml 
            /WEB-INF/security-bean.xml
        </param-value>
    </context-param>
    
    <!-- logger세팅 처음  listener를 설정 해야 logger 커스텀 가능-->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/log_setting/log4j_dev.xml</param-value>
    </context-param>
    <!-- 
        운영환경시 변경 
        
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/log_setting/log4j_opration.xml</param-value>
    </context-param>
    
    -->
    <!-- 디스패쳐 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- Processes application requests -->
    <!-- init-param이 없다면  'servlet-name' + '-servlet.xml' 즉 appServlet-servlet.xml을 자동으로 찾음  -->
    <servlet>
        <servlet-name>appServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/servlet/app-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
        
    <servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    
    <!-- 한글을 사용하기 위해 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>    
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping> 
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- 세션 설정 -->
    <session-config> 
        <session-timeout>30</session-timeout>
    </session-config>
    
    <!-- 에러 페이지설정 -->
    <error-page>
        <error-code>404</error-code>
        <location>/defaultError.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/defaultError.jsp</location>
    </error-page>
    
    <!-- XSS 공격 방지  -->
    <filter>
       <filter-name>mutipartFilter</filter-name>
       <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>mutipartFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>XSS</filter-name>
        <filter-class>com.honbabzone.tomcat.utile.CrossScriptingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XSS</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- security 필터 설정  -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy
        </filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- 스프링(multi 다중) 파일업로드 위해 다른곳은 없음 아 짜증...-->
    <!-- 해당 구문을 위해서는 tomcat에 추가해줘야 한다. -->
    <!-- context.xml
    <Context allowCasualMultipartParsing="true">
        <Resources cachingAllowed="true" cacheMaxSize="100000"></Resources>
        
        server.xml
        <Connector connectionTimeout="20000" 
           port="8080" 
           protocol="HTTP/1.1" 
           redirectPort="8443" 
           maxPostSize="52428800" />
           50m까지 서버에서 받아들임
    -->
    <filter>
        <filter-name>springMultipartFilter</filter-name>
        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>springMultipartFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	    
        
</web-app>
